---
description: shadcn-vue UI component patterns and best practices
globs: *.vue
alwaysApply: false
---
# Shadcn UI Component Rules

Auto-attach to: `components/ui/**/*`

## Context
This project uses shadcn-vue components as the primary UI library. All Awesome* components have been removed and replaced with shadcn equivalents.

## Required Patterns

### Component Prefix
- ALL shadcn components use the `Ui` prefix (e.g., `UiButton`, `UiCard`, `UiAlert`)
- Components are auto-imported via Nuxt configuration
- NO manual imports needed in consuming components

### Component Structure
```vue
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { Primitive, type PrimitiveProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { type ButtonVariants, buttonVariants } from '.'

interface Props extends PrimitiveProps {
  variant?: ButtonVariants['variant']
  size?: ButtonVariants['size']
  class?: HTMLAttributes['class']
}

const props = withDefaults(defineProps<Props>(), {
  as: 'button',
})
</script>

<template>
  <Primitive
    :as="as"
    :as-child="asChild"
    :class="cn(buttonVariants({ variant, size }), props.class)"
  >
    <slot />
  </Primitive>
</template>
```

### CVA Variant Definitions
```typescript
// ✅ REQUIRED: CVA pattern for variants
import { cva, type VariantProps } from 'class-variance-authority'

export const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
        outline: 'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2',
        xs: 'h-7 rounded px-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

export type ButtonVariants = VariantProps<typeof buttonVariants>
```

### Index File Exports
```typescript
// ✅ REQUIRED: Export pattern for shadcn components
export { default as Button } from './Button.vue'
export { buttonVariants, type ButtonVariants } from './variants'

// For component families (like Card)
export { default as Card } from './Card.vue'
export { default as CardContent } from './CardContent.vue'
export { default as CardDescription } from './CardDescription.vue'
export { default as CardFooter } from './CardFooter.vue'
export { default as CardHeader } from './CardHeader.vue'
export { default as CardTitle } from './CardTitle.vue'
```

## CSS Variable Integration

### Motiff Theme Support
```css
/* ✅ Components should use CSS variables for theming */
:root {
  --background: 18 18 18;           /* #121212 - motiff-dark-primary */
  --foreground: 255 255 255;       /* #FFFFFF - motiff-text-primary */
  --primary: 19 119 185;           /* #1377B9 - motiff-primary */
  --primary-foreground: 255 255 255;
  --secondary: 26 26 26;           /* #1A1A1A - motiff-dark-secondary */
  --secondary-foreground: 255 255 255;
  --muted: 35 35 35;               /* #232323 - motiff-dark-card */
  --muted-foreground: 170 170 170; /* #AAAAAA - motiff-text-muted */
  --accent: 35 35 35;              /* #232323 */
  --accent-foreground: 255 255 255;
  --destructive: 239 68 68;        /* red-500 */
  --destructive-foreground: 255 255 255;
  --border: 51 51 51;              /* motiff-dark-primary/border */
  --input: 51 51 51;
  --ring: 19 119 185;              /* motiff-primary */
}
```

### Component CSS Classes
```typescript
// ✅ Use HSL CSS variables in component classes
'bg-background text-foreground'
'bg-primary text-primary-foreground'
'bg-secondary text-secondary-foreground'
'border-border'
'focus-visible:ring-ring'
```

## Component Guidelines

### Accessibility Requirements
- ✅ Maintain all ARIA attributes
- ✅ Preserve keyboard navigation
- ✅ Include proper focus indicators
- ✅ Support screen readers
- ✅ Use semantic HTML elements

### TypeScript Standards
- ✅ Use proper interface inheritance
- ✅ Export component and variant types
- ✅ Include HTMLAttributes['class'] for className support
- ✅ Use VariantProps for type safety
- ✅ Proper generic constraints

### File Structure
```
components/ui/button/
├── Button.vue         # Main component
├── index.ts          # Exports and variants
└── README.md         # Component documentation (optional)
```

## Common Component Patterns

### Basic Component (like Separator)
```vue
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

interface Props {
  orientation?: 'horizontal' | 'vertical'
  decorative?: boolean
  class?: HTMLAttributes['class']
}

const props = withDefaults(defineProps<Props>(), {
  orientation: 'horizontal',
  decorative: true,
})
</script>

<template>
  <div
    :role="decorative ? undefined : 'separator'"
    :aria-orientation="orientation"
    :class="cn(
      'shrink-0 bg-border',
      orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
      props.class
    )"
  />
</template>
```

### Container Component (like Card)
```vue
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    :class="cn(
      'rounded-xl border bg-card text-card-foreground shadow',
      props.class,
    )"
  >
    <slot />
  </div>
</template>
```

## Validation Rules
1. All components MUST use `cn()` utility for className merging
2. All components MUST support `class` prop for custom styling
3. All variants MUST be defined using CVA pattern
4. All exports MUST include both component and types
5. All CSS MUST use CSS variables for theming
6. All accessibility features MUST be preserved

## Integration with Motiff Theme
- Use CSS variables that map to Motiff colors
- Support both light and dark themes through CSS variables
- Maintain shadcn's design tokens while adapting to Motiff palette
- Preserve all accessibility and interaction patterns

## Anti-Patterns (FORBIDDEN)
- ❌ Hardcoding Motiff colors directly in shadcn components
- ❌ Modifying core shadcn accessibility features
- ❌ Skipping TypeScript types in component definitions
- ❌ Creating custom CSS classes outside the design system
- ❌ Removing or modifying shadcn's core interaction patterns
